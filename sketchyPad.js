// Generated by CoffeeScript 1.6.3
(function() {
  var SketchListener, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SketchListener = (function() {
    function SketchListener(opts) {
      this.onCanvasMouseUp = __bind(this.onCanvasMouseUp, this);
      this.onCanvasMouseMove = __bind(this.onCanvasMouseMove, this);
      this.getMouseCoord = __bind(this.getMouseCoord, this);
      this.onCanvasMouseDown = __bind(this.onCanvasMouseDown, this);
      this.onCanvasMouseOut = __bind(this.onCanvasMouseOut, this);
      this.onCanvasMouseHover = __bind(this.onCanvasMouseHover, this);
      this.removeCallback = __bind(this.removeCallback, this);
      this.addCallback = __bind(this.addCallback, this);
      this.stop = __bind(this.stop, this);
      this.start = __bind(this.start, this);
      this.$canvas = $('<canvas>', opts);
      this.width = this.$canvas.width();
      this.height = this.$canvas.height();
      this.callbacks = {
        onCanvasMouseHover: [],
        onCanvasMouseDown: [],
        onCanvasMouseMove: [],
        onCanvasMouseUp: [],
        onCanvasMouseOut: []
      };
      this.mouseCoord = {
        x: 0,
        y: 0
      };
      this.touchSupported = (__indexOf.call(window, 'ontouchstart') >= 0);
    }

    SketchListener.prototype.start = function() {
      if (this.touchSupported) {
        this.mouseDownEvent = "touchstart";
        this.mouseMoveEvent = "touchmove";
        this.mouseUpEvent = "touchend";
      } else {
        this.mouseDownEvent = "mousedown";
        this.mouseMoveEvent = "mousemove";
        this.mouseUpEvent = "mouseup";
        this.$canvas.bind(this.mouseMoveEvent, this.onCanvasMouseHover);
        this.$canvas.bind('mouseout', this.onCanvasMouseOut);
      }
      this.$canvas.bind(this.mouseDownEvent, this.onCanvasMouseDown);
      return console.log('listening started');
    };

    SketchListener.prototype.stop = function() {
      this.$canvas.unbind();
      return console.log('listening stopped');
    };

    SketchListener.prototype.addCallback = function(eventName, func) {
      return this.callbacks[eventName].push(func);
    };

    SketchListener.prototype.removeCallback = function(eventName, func) {
      var indexOfCallback;
      indexOfCallback = this.callbacks[eventName].indexOf(func);
      return this.callbacks[eventName].splice(indexOfCallback, 1);
    };

    SketchListener.prototype.onCanvasMouseHover = function(event) {
      var callback, _i, _len, _ref, _results;
      this.getMouseCoord(event);
      console.log('hovering');
      _ref = this.callbacks['onCanvasMouseHover'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback.call());
      }
      return _results;
    };

    SketchListener.prototype.onCanvasMouseOut = function(event) {
      var callback, _i, _len, _ref, _results;
      console.log('mouse out');
      _ref = this.callbacks['onCanvasMouseOut'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback.call());
      }
      return _results;
    };

    SketchListener.prototype.onCanvasMouseDown = function(event) {
      var callback, _i, _len, _ref;
      this.getMouseCoord(event);
      console.log('mouse down');
      _ref = this.callbacks['onCanvasMouseDown'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback.call();
      }
      if (!this.touchSupported) {
        this.$canvas.unbind(this.mouseMoveEvent, this.onCanvasMouseHover);
      }
      $(document).bind(this.mouseMoveEvent, this.onCanvasMouseMove);
      return $(document).bind(this.mouseUpEvent, this.onCanvasMouseUp);
    };

    SketchListener.prototype.getMouseCoord = function(event) {
      var offset, target;
      if (this.touchSupported) {
        target = event.originalEvent.touches[0];
      } else {
        target = event;
      }
      offset = this.$canvas.offset();
      this.mouseCoord.x = Math.round(target.pageX - offset.left);
      return this.mouseCoord.y = Math.round(target.pageY - offset.top);
    };

    SketchListener.prototype.onCanvasMouseMove = function(event) {
      var callback, _i, _len, _ref;
      this.getMouseCoord(event);
      console.log('mouse move');
      _ref = this.callbacks['onCanvasMouseMove'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback.call();
      }
      event.preventDefault();
      return false;
    };

    SketchListener.prototype.onCanvasMouseUp = function(event) {
      var callback, _i, _len, _ref;
      console.log('mouse up');
      _ref = this.callbacks['onCanvasMouseUp'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback.call();
      }
      $(document).unbind(this.mouseMoveEvent, this.onCanvasMouseMove);
      $(document).unbind(this.mouseUpEvent, this.onCanvasMouseUp);
      if (!this.touchSupported) {
        return this.$canvas.bind(this.mouseMoveEvent, this.onCanvasMouseHover);
      }
    };

    return SketchListener;

  })();

  root.SketchListener = SketchListener;

}).call(this);
