// Generated by CoffeeScript 1.6.3
(function() {
  var SketchController, SketchData, SketchListener, SketchStroke, SketchView, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SketchData = (function() {
    function SketchData() {
      this.strokes = [];
    }

    SketchData.prototype.addStroke = function(stroke) {
      return this.strokes.push(stroke);
    };

    return SketchData;

  })();

  SketchStroke = (function() {
    function SketchStroke() {
      this.color = 'rgba(255,0,0,0.5)';
      this.data_points = [];
    }

    SketchStroke.prototype.add = function(x, y, pressure) {
      return this.data_points.push([x, y, pressure, new Date().getTime()]);
    };

    return SketchStroke;

  })();

  SketchView = (function() {
    function SketchView(opts) {
      this.$canvas = $('<canvas>', opts).attr('width', opts['width']).attr('height', opts['height']);
      this.width = this.$canvas.width();
      this.height = this.$canvas.height();
      this.ctx = this.$canvas[0].getContext('2d');
      this.ctx.globalCompositeOperation = "source-over";
    }

    SketchView.prototype.drawStroke = function(stroke) {
      return console.log('draw stroke', stroke);
    };

    SketchView.prototype.drawStrokes = function(strokes) {
      var stroke, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = strokes.length; _i < _len; _i++) {
        stroke = strokes[_i];
        _results.push(this.drawStroke(stroke));
      }
      return _results;
    };

    SketchView.prototype.playbackStrokes = function(strokes) {
      return console.log('playback strokes');
    };

    SketchView.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.width, this.height);
    };

    return SketchView;

  })();

  SketchListener = (function() {
    function SketchListener(element) {
      this.getPressure = __bind(this.getPressure, this);
      this.onCanvasMouseUp = __bind(this.onCanvasMouseUp, this);
      this.onCanvasMouseMove = __bind(this.onCanvasMouseMove, this);
      this.getMouseCoord = __bind(this.getMouseCoord, this);
      this.onCanvasMouseDown = __bind(this.onCanvasMouseDown, this);
      this.onCanvasMouseOut = __bind(this.onCanvasMouseOut, this);
      this.onCanvasMouseHover = __bind(this.onCanvasMouseHover, this);
      this.removeCallback = __bind(this.removeCallback, this);
      this.addCallback = __bind(this.addCallback, this);
      this.stop = __bind(this.stop, this);
      this.start = __bind(this.start, this);
      this.$wacom_object = $('<object>', {
        id: 'wtPlugin',
        type: 'application/x-wacomtabletplugin'
      });
      this.$wacom_object.append($('<param>', {
        name: 'onload',
        value: 'pluginLoaded'
      }));
      $('body').append(this.$wacom_object);
      this.$element = element;
      console.log('sketch listening getting element', this.$element);
      this.callbacks = {
        onCanvasMouseHover: [],
        onCanvasMouseDown: [],
        onCanvasMouseMove: [],
        onCanvasMouseUp: [],
        onCanvasMouseOut: []
      };
      this.mouseCoord = [0, 0];
      this.touchSupported = (__indexOf.call(window, 'ontouchstart') >= 0);
    }

    SketchListener.prototype.start = function() {
      if (this.touchSupported) {
        this.mouseDownEvent = "touchstart";
        this.mouseMoveEvent = "touchmove";
        this.mouseUpEvent = "touchend";
      } else {
        this.mouseDownEvent = "mousedown";
        this.mouseMoveEvent = "mousemove";
        this.mouseUpEvent = "mouseup";
        this.$element.bind(this.mouseMoveEvent, this.onCanvasMouseHover);
        this.$element.bind('mouseout', this.onCanvasMouseOut);
      }
      return this.$element.bind(this.mouseDownEvent, this.onCanvasMouseDown);
    };

    SketchListener.prototype.stop = function() {
      return this.$element.unbind();
    };

    SketchListener.prototype.addCallback = function(eventName, func) {
      return this.callbacks[eventName].push(func);
    };

    SketchListener.prototype.removeCallback = function(eventName, func) {
      var indexOfCallback;
      indexOfCallback = this.callbacks[eventName].indexOf(func);
      return this.callbacks[eventName].splice(indexOfCallback, 1);
    };

    SketchListener.prototype.onCanvasMouseHover = function(event) {
      var callback, _i, _len, _ref, _results;
      this.getMouseCoord(event);
      _ref = this.callbacks['onCanvasMouseHover'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback.call());
      }
      return _results;
    };

    SketchListener.prototype.onCanvasMouseOut = function(event) {
      var callback, _i, _len, _ref, _results;
      _ref = this.callbacks['onCanvasMouseOut'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback.call());
      }
      return _results;
    };

    SketchListener.prototype.onCanvasMouseDown = function(event) {
      var callback, _i, _len, _ref;
      this.getMouseCoord(event);
      _ref = this.callbacks['onCanvasMouseDown'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback.call();
      }
      if (!this.touchSupported) {
        this.$element.unbind(this.mouseMoveEvent, this.onCanvasMouseHover);
      }
      $(document).bind(this.mouseMoveEvent, this.onCanvasMouseMove);
      return $(document).bind(this.mouseUpEvent, this.onCanvasMouseUp);
    };

    SketchListener.prototype.getMouseCoord = function(event) {
      var offset, target;
      console.log('getting mouse coor');
      if (this.touchSupported) {
        target = event.originalEvent.touches[0];
      } else {
        target = event;
      }
      offset = this.$element.offset();
      this.mouseCoord[0] = Math.round(target.pageX - offset.left);
      return this.mouseCoord[1] = Math.round(target.pageY - offset.top);
    };

    SketchListener.prototype.onCanvasMouseMove = function(event) {
      var callback, _i, _len, _ref;
      this.getMouseCoord(event);
      _ref = this.callbacks['onCanvasMouseMove'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback.call();
      }
      event.preventDefault();
      return false;
    };

    SketchListener.prototype.onCanvasMouseUp = function(event) {
      var callback, _i, _len, _ref;
      _ref = this.callbacks['onCanvasMouseUp'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback.call();
      }
      $(document).unbind(this.mouseMoveEvent, this.onCanvasMouseMove);
      $(document).unbind(this.mouseUpEvent, this.onCanvasMouseUp);
      if (!this.touchSupported) {
        return this.$element.bind(this.mouseMoveEvent, this.onCanvasMouseHover);
      }
    };

    SketchListener.prototype.getPressure = function() {
      return document.getElementById('wtPlugin').penAPI.pressure;
    };

    return SketchListener;

  })();

  SketchController = (function() {
    function SketchController(element) {
      this.process_mouse_up = __bind(this.process_mouse_up, this);
      this.process_mouse_move = __bind(this.process_mouse_move, this);
      this.process_mouse_down = __bind(this.process_mouse_down, this);
      this.$element = element;
      this.width = this.$element.width();
      this.height = this.$element.height();
      this.$fg_view = new SketchView({
        id: 'sketch_pad_fg',
        width: this.width,
        height: this.height
      });
      this.$bg_view = new SketchView({
        id: 'sketch_page_bg',
        width: this.width,
        height: this.height
      });
      this.$element.prepend(this.$fg_view.$canvas);
      this.$element.prepend(this.$bg_view.$canvas);
      this.listener = new SketchListener(this.$fg_view.$canvas);
      this.listener.addCallback('onCanvasMouseUp', this.process_mouse_up);
      this.listener.addCallback('onCanvasMouseMove', this.process_mouse_move);
      this.listener.addCallback('onCanvasMouseDown', this.process_mouse_down);
      this.sketchData = new SketchData();
      this.strokeData = new SketchStroke();
      this.listener.start();
    }

    SketchController.prototype.process_mouse_down = function() {
      console.log('mouse down');
      return this.strokeData.add(this.listener.mouseCoord[0], this.listener.mouseCoord[0], this.listener.getPressure());
    };

    SketchController.prototype.process_mouse_move = function() {
      this.strokeData.add(this.listener.mouseCoord[0], this.listener.mouseCoord[0], this.listener.getPressure());
      return console.log('sketchstroke', this.strokeData);
    };

    SketchController.prototype.process_mouse_up = function() {
      this.sketchData.addStroke(this.strokeData);
      this.strokeData = new SketchStroke();
      return console.log('sketch Data', this.sketchData);
    };

    return SketchController;

  })();

  root.SketchListener = SketchListener;

  (function($, window, document) {
    var $this, methods, _anotherState, _flag, _internals, _settings, _sketch_controller;
    $this = void 0;
    _settings = {
      "default": 'cool!'
    };
    _flag = false;
    _anotherState = null;
    _sketch_controller = null;
    methods = {
      init: function(options) {
        $this = $(this);
        _sketch_controller = new SketchController($this);
        console.log(_sketch_controller);
        $.extend(_settings, options || {});
        return $this;
      },
      doSomething: function(what) {
        return $this;
      },
      destroy: function() {
        return $this;
      }
    };
    _internals = {
      toggleFlag: function() {
        return _flag = !_flag;
      },
      computeSomething: function(state, flag) {
        return flag != null ? flag : {
          state: "No, that's not right."
        };
      }
    };
    return $.fn.sketchyPad = function(method) {
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof method === "object" || !method) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error("Method " + method + " does not exist on jquery.sketchyPad");
      }
    };
  })(jQuery, window, document);

}).call(this);
